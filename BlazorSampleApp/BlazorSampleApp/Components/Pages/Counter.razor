@page "/counter"
@* @rendermode InteractiveServer  // サーバの値をクライアントに反映する *@
@rendermode @(new InteractiveServerRenderMode(prerender:false))  //ProtectedSessionStorageを使用する場合、prerenderをfalseにする必要がある
@inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedSessionStorage Storage

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>


<InputRadioGroup @bind-Value="_kind" @bind-Value:after="KindChanged">
	<div class="form-check">
		<label>
			<InputRadio class="form-check-input" Value="0" /> Option 1
		</label>
	</div>

	<div class="form-check">
		<label>
			<InputRadio class="form-check-input" Value="1" /> Option 2
		</label>
	</div>

	<div class="form-check">
		<label>
			<InputRadio class="form-check-input" Value="2" /> Option 3
		</label>
	</div>
</InputRadioGroup>

@* OnInitializedAsyncが終わるまでブロック *@
@if(_currentCount.HasValue){
	<p role="status">Current count: @_currentCount</p>
	<button class="btn btn-primary" @onclick="IncrementCountAsync">Click me</button>
}
else{
	<p>データ取得中...</p>
}

@code {
	private int? _currentCount = null;
	private int _kind = 0;

	protected override async Task OnInitializedAsync()
	{
		var result = await Storage.GetAsync<int>("currentCount");

		await Task.Delay(3000); //データ取得の遅延をシミュレート

		if (result.Success)
		{
			_currentCount = result.Value;
		}
		else
		{
			_currentCount = 0;
		}
	}

	private async Task IncrementCountAsync()
	{
		_currentCount++;
		await Storage.SetAsync("currentCount", _currentCount);
	}
	private void KindChanged()
	{
	}
}
