@page "/admin"
@rendermode InteractiveServer
@inject QuestionManager QuestionManager

@using System.ComponentModel.DataAnnotations
@using BlazorSampleApp.Components.Model
@using BlazorSampleApp.Components.Objects

<h3>クイズ管理ページ</h3>

<div class="p-4 space-y-4">
	<!-- 問題追加フォーム -->
	<div class="border p-4 rounded shadow">
		<h4>問題追加</h4>

		<div class="mb-2">
			<label>問題文:</label>
			<input class="form-control" @bind="newQuestion.Text" />
		</div>

		<div class="mb-2">
			<label>点数:</label>
			<input type="number" class="form-control" @bind="newQuestion.Score" />
		</div>

		<div class="mb-2">
			<label>問題タイプ:</label>
			<select class="form-control" @bind="newQuestion.Type">
				<option value="Choice">選択式</option>
				<option value="Text">記述式</option>
			</select>
		</div>

		@if (newQuestion.Type == QuestionType.Text)
		{
			<div class="mb-2">
				<label>正解記述:</label>
				<input class="form-control" @bind="newQuestion.CorrectText" />
			</div>
		}
		else if (newQuestion.Type == QuestionType.Choice)
		{
			<div class="mb-2">
				<h5>選択肢</h5>
				<InputRadioGroup @bind-Value="newQuestion.CorrectIndex">
				@foreach (var choice in newQuestion.Choices.Select((c, i) => new { c, i }))
				{
					<div class="d-flex align-items-center mb-2">

						<InputRadio class="form-check-input me-3" Value="choice.i" />

						<input class="form-control me-3" @bind="newQuestion.Choices[choice.i]" />


						<button class="btn btn-danger btn-sm" @onclick="() => RemoveChoice(choice.i)">削除</button>
					</div>
				}
				</InputRadioGroup>

				<button class="btn btn-secondary btn-sm" @onclick="AddChoice">選択肢追加</button>
			</div>
		}

		<button class="btn btn-primary" @onclick="AddQuestion">問題を追加</button>
	</div>


	<!-- 問題リスト -->
	<div class="border p-4 rounded shadow">
		<h4>作成済み問題</h4>
		<ul>
			@foreach (var q in QuestionManager.Questions)
			{
				<li>
					<b>@q.Text</b>（@q.Score 点, @q.Type, @q.CorrectText, @q.CorrectIndex, @string.Join(" ",@q.Choices))
					<button class="btn btn-sm btn-danger" @onclick="() => DeleteQuestion(q)">削除</button>
				</li>
			}
		</ul>
	</div>

	<!-- ルーム管理 -->
	<div class="border p-4 rounded shadow">
		<h4>ルーム管理</h4>
		<button class="btn btn-success" @onclick="GenerateRoomId">クイズ開始</button>
		@if (!string.IsNullOrEmpty(roomId))
		{
			<p>ルームID: <b>@roomId</b></p>
		}
	</div>
</div>

@code {
	private int _kind = 1;

	// 状態
	// private List<Question> questions = new();
	private Question newQuestion = new();
	private string? roomId;

	// 初期化
	protected override void OnInitialized()
	{
		QuestionManager.OnChange += () => InvokeAsync(StateHasChanged);
	}

	// 処理
	private void AddChoice()
	{
		newQuestion.Choices.Add(string.Empty);
	}

	private void RemoveChoice(int index)
	{
		if (index >= 0 && index < newQuestion.Choices.Count)
		{
			newQuestion.Choices.RemoveAt(index);
		}
	}

	private void AddQuestion()
	{
		QuestionManager.AddQuestion(newQuestion);
		newQuestion = new Question(); // フォームをリセット
	}

	private void DeleteQuestion(Question q)
	{
		QuestionManager.DeleteQuestion(q);
	}

	public void Dispose()
	{
		QuestionManager.OnChange -= () => InvokeAsync(StateHasChanged);
	}

	private void GenerateRoomId()
	{
		roomId = Guid.NewGuid().ToString("N").Substring(0, 6).ToUpper();
	}

	private void KindChanged()
	{
	}
}
