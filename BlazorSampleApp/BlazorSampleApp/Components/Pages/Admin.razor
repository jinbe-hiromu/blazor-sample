@page "/admin"
@rendermode InteractiveServer
@inject QuestionManager QuestionManager
@inject RoomManager RoomManager

@using System.ComponentModel.DataAnnotations
@using BlazorSampleApp.Components.Model
@using BlazorSampleApp.Components.Objects

<h3>クイズ管理ページ</h3>

<div class="p-4 space-y-4">
	<!-- 問題追加フォーム -->
	<div class="border p-4 rounded shadow">
		<h4>問題追加</h4>

		<div class="mb-2">
			<label>問題文:</label>
			<input class="form-control" @bind="_questionText" />
		</div>

		<div class="mb-2">
			<label>点数:</label>
			<input type="number" class="form-control" @bind="_score" />
		</div>

		<div class="mb-2">
			<label>問題タイプ:</label>
			<select class="form-control" @bind="_questionType">
				<option value="Choice">選択式</option>
				<option value="Text">記述式</option>
			</select>
		</div>

		@if (_questionType == QuestionType.Text)
		{
			<div class="mb-2">
				<label>正解記述:</label>
				<input class="form-control" @bind="_correctText" />
			</div>
		}
		else if (_questionType == QuestionType.Choice)
		{
			<div class="mb-2">
				<h5>選択肢</h5>
				<InputRadioGroup @bind-Value="_correctIndex">
				@foreach (var choice in _choices.Select((c, i) => new { c, i }))
				{
					<div class="d-flex align-items-center mb-2">

						<InputRadio class="form-check-input me-3" Value="choice.i" />

						<input class="form-control me-3" @bind="_choices[choice.i]" />


						<button class="btn btn-danger btn-sm" @onclick="() => RemoveChoice(choice.i)">削除</button>
					</div>
				}
				</InputRadioGroup>

				<button class="btn btn-secondary btn-sm" @onclick="AddChoice">選択肢追加</button>
			</div>
		}

		<button class="btn btn-primary" @onclick="AddQuestion">問題を追加</button>
	</div>


	<!-- 問題リスト -->
	<div class="border p-4 rounded shadow">
		<h4>作成済み問題</h4>
		<ul>
			@foreach (var q in QuestionManager.Questions)
			{
				<li>
					<b>@q.Text @q.Score 点</b>
					@if(q is ChoiceQuestion choiceQuestion)
					{
						<b>選択式 正解：@choiceQuestion.CorrectIndex 選択肢：@string.Join(",",@choiceQuestion.Choices)</b>
					}
					else if (q is TextQuestion textQuestion)
					{
						<b>記述式 正解：@textQuestion.CorrectText</b>
					}
					<button class="btn btn-sm btn-danger" @onclick="() => DeleteQuestion(q)">削除</button>
				</li>
			}
		</ul>
	</div>

	<!-- ルーム管理 -->
	<div class="border p-4 rounded shadow">
		<h4>ルーム管理</h4>


		<p>ルームID：
			<input class="form-control" type="text" @bind="_roomId"></input>
		</p> 
		<button class="btn btn-success" @onclick="AddRoom">ルーム作成</button>
	</div>

	<!-- ルームリスト -->
	<div class="border p-4 rounded shadow">
		<h4>作成済みルーム</h4>
		<ul>
			@foreach (var room in RoomManager.Rooms)
			{
				<li class="d-flex align-items-center mb-2">
					<b class="me-2">@room.RoomId</b>
					<button class="btn btn-sm btn-danger" @onclick="() => DeleteRoom(room)">削除</button>
				</li>
			}
		</ul>
	</div>
</div>

@code {
	// 状態
	private string _questionText = string.Empty;
	private QuestionType _questionType = QuestionType.Choice;
	private string _correctText = string.Empty;
	private int _score = 10;
	private int _correctIndex = -1;
	private List<string> _choices = new List<string>();

	private string? _roomId;

	private Dictionary<QuestionType, IQuestionFactory> _factories 
	= new Dictionary<QuestionType, IQuestionFactory>
		{
			{ QuestionType.Choice, new ChoiceQuestionFactory() },
			{ QuestionType.Text, new TextQuestionFactory() }
		};

	// 初期化
	protected override void OnInitialized()
	{
		QuestionManager.OnChange += () => InvokeAsync(StateHasChanged);
	}

	// 処理
	private void AddChoice()
	{
		_choices.Add(string.Empty);
	}

	private void RemoveChoice(int index)
	{
		if (index >= 0 && index < _choices.Count)
		{
			_choices.RemoveAt(index);
		}
	}

	private void AddQuestion()
	{
		var newQuestion = _factories[_questionType].Create(_questionText,_score);

		if(_questionType == QuestionType.Text)
		{
			((TextQuestion)newQuestion).CorrectText = _correctText;	
		}else if(_questionType == QuestionType.Choice)
		{
			((ChoiceQuestion)newQuestion).Choices = new List<string>(_choices);
			((ChoiceQuestion)newQuestion).CorrectIndex = _correctIndex;
		}

		QuestionManager.AddQuestion(newQuestion);

		// フォームをリセット
		_questionText = string.Empty;
		_questionType = QuestionType.Choice;
		_correctText = string.Empty;
		_score = 10;
		_correctIndex = -1;
		_choices = new List<string>();
	}

	private void DeleteQuestion(Question q)
	{
		QuestionManager.DeleteQuestion(q);
	}

	public void Dispose()
	{
		QuestionManager.OnChange -= () => InvokeAsync(StateHasChanged);
	}

	private void AddRoom()
	{
		if (string.IsNullOrWhiteSpace(_roomId))
		{
			return;
		}
		RoomManager.AddRoom(_roomId);
	}

	private void DeleteRoom(Room room)
	{
		RoomManager.DeleteRoom(room);
	}
}
